<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Typescript Study</title>
  
  <subtitle>Typescript Study</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://typescript-study.github.io/"/>
  <updated>2020-04-12T17:58:16.711Z</updated>
  <id>https://typescript-study.github.io/</id>
  
  <author>
    <name>Taeuk Kang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Quick Start Typescript ~ 9장 정리</title>
    <link href="https://typescript-study.github.io/wiki/Typescript%20quick%20start%20-9%EC%9E%A5/"/>
    <id>https://typescript-study.github.io/wiki/Typescript quick start -9장/</id>
    <published>2020-04-12T09:39:05.000Z</published>
    <updated>2020-04-12T17:58:16.711Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성</p></blockquote><h1 id="9장-고급-타입"><a href="#9장-고급-타입" class="headerlink" title="9장 고급 타입"></a>9장 고급 타입</h1><h2 id="📝315p-유니언-타입"><a href="#📝315p-유니언-타입" class="headerlink" title="📝315p. 유니언 타입"></a>📝315p. 유니언 타입</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure><h2 id="📝317p-타입-가드"><a href="#📝317p-타입-가드" class="headerlink" title="📝317p. 타입 가드"></a>📝317p. 타입 가드</h2><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myIndexOf</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span>, y: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">`string`</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.indexOf(y);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myIndexOf(<span class="string">`hello`</span>, <span class="string">`e`</span>))</span><br></pre></td></tr></table></figure><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diff</span>(<span class="params">x: Cat | Dog</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">       ... </span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝320p-고급-타입들"><a href="#📝320p-고급-타입들" class="headerlink" title="📝320p. 고급 타입들"></a>📝320p. 고급 타입들</h2><h3 id="문자열-리터럴-타입"><a href="#문자열-리터럴-타입" class="headerlink" title="문자열 리터럴 타입"></a>문자열 리터럴 타입</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> event; <span class="string">'keyup'</span> = <span class="string">'keyup'</span>;<span class="comment">// O</span></span><br><span class="line"><span class="keyword">let</span> event: <span class="string">'keyup'</span> = <span class="string">'keyup2'</span>;<span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> EventType = <span class="string">'keyup'</span> | <span class="string">'mouseover'</span>;</span><br><span class="line"><span class="keyword">const</span> myEvent: EventType = <span class="string">'keyup'</span>;</span><br></pre></td></tr></table></figure><h3 id="룩업-타입-인덱스-타입"><a href="#룩업-타입-인덱스-타입" class="headerlink" title="룩업 타입 (= 인덱스 타입)"></a>룩업 타입 (= 인덱스 타입)</h3><p><code>keyof</code> 명령어를 통해 타입 T의 하위 타입을 생성, 타입 T는 여러 타입으로 이뤄진 유니언이나 인터페이스 타입을 의미</p><p>확장성을 고려해 <code>interface</code>를 도입</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Profile &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    gender: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 인터페이스를 <code>keyof</code>를 활용하여 룩업 타입으로 선언</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// # 1</span></span><br><span class="line"><span class="comment">// 이렇게 선언된 변수는 name , gener, age 중 하나를 할당 받기 가능</span></span><br><span class="line"><span class="keyword">type</span> Profile1 = keyof Profile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pValue: Profile1 = <span class="string">'name'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// # 2</span></span><br><span class="line"><span class="comment">// 배열 타입의 내장 속성인, length, push, pop, concat 등을 할당받아 사용 가능</span></span><br><span class="line"><span class="keyword">type</span> Profile2 = keyof Profile[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pValue2: Profile2 = <span class="string">'length'</span>;</span><br><span class="line"><span class="keyword">let</span> pValue3: Profile2 = <span class="string">'push'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// # 3</span></span><br><span class="line"><span class="comment">// ??? 이해 안되는 부분</span></span><br><span class="line"><span class="comment">// 어느 문자열이든 입력 가능한건가?</span></span><br><span class="line"><span class="keyword">type</span> Profile3: keyof &#123; [x: <span class="built_in">string</span>]: Profile &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pValue4: Profile3 = <span class="string">`hello`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// # 4</span></span><br><span class="line"><span class="comment">// name의 string 타입을 전달, 타입이 string일 때 접근 가능한 내장 속성 이용 가능</span></span><br><span class="line"><span class="keyword">type</span> Profile4 = keyof Profile[<span class="string">`name`</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pValue5: Profile4 = <span class="string">`length`</span>;</span><br><span class="line"><span class="keyword">let</span> pValue6: Profile4 = <span class="string">`abcd`</span>;<span class="comment">// error</span></span><br></pre></td></tr></table></figure><h3 id="non-nullable-타입"><a href="#non-nullable-타입" class="headerlink" title="non-nullable 타입"></a>non-nullable 타입</h3><p>타입스크립트 2.0 이전에는 <code>null</code> 이나 <code>undefined</code>는 모든 타입의 변수에 할당할 수 있었음</p><p>그러나, <code>tsconfig.json</code>에 <code>strictNullCheck</code>을 true로 바꾸면, <code>null</code>과 <code>undefined</code>가 자동으로 모든 타입의 할당되지 않고 별도로 타입으올 관리해줘야함.</p><h3 id="never-타입"><a href="#never-타입" class="headerlink" title="never 타입"></a>never 타입</h3><p><code>never</code>는 모든 타입의 하위 타입으로 사용할 수 있지만, <code>any</code>만 할당될 수 없다.</p><p><strong>사용용도</strong></p><ol><li>함수에 닿을 수 없는 코드 영역이 있어 반환값이 존재하지 않을 때</li><li>함수에 <code>throw</code>객체가 반환되어, 오류가 발생할 때</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> neverFunc = (): <span class="function"><span class="params">never</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(); &lt;- 닿을 수 없음</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> resultNever: never = neverFunc();</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this-타입"><a href="#this-타입" class="headerlink" title="this 타입"></a>this 타입</h3><p><code>this</code> 타입을 다형적 this 타입이라고도 함, 선언 위치에 따라 참조하는 대상이 달라지기 때문</p><h4 id="인터페이스에-this-사용-예시"><a href="#인터페이스에-this-사용-예시" class="headerlink" title="인터페이스에  this 사용 예시"></a>인터페이스에  <code>this</code> 사용 예시</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ListItem &#123;</span><br><span class="line">    getHead(): <span class="keyword">this</span>;</span><br><span class="line">    getTail(): <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="플루언트-인터페이스-패턴-플루언트-패턴"><a href="#플루언트-인터페이스-패턴-플루언트-패턴" class="headerlink" title="플루언트 인터페이스 패턴 (플루언트 패턴)"></a>플루언트 인터페이스 패턴 (플루언트 패턴)</h4><p>그냥 자기자신 반환해서 체이닝하는 패턴</p><blockquote><p>개인적으로 이런 형식으로 많이 사용했었음</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Mycalc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        val: <span class="number">0</span>,</span><br><span class="line">        plus(num) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val += num;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        minus(num) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val -= num;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mycalc().plus(<span class="number">3</span>).minus(<span class="number">2</span>).val<span class="comment">// 1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;9장-고급-타입&quot;&gt;&lt;a href=&quot;#9장-고급-타입&quot; class
      
    
    </summary>
    
      <category term="Typescript" scheme="https://typescript-study.github.io/categories/Typescript/"/>
    
    
      <category term="Typescript" scheme="https://typescript-study.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Quick Start Typescript ~ 8장 정리</title>
    <link href="https://typescript-study.github.io/wiki/Typescript%20quick%20start%20-8%EC%9E%A5/"/>
    <id>https://typescript-study.github.io/wiki/Typescript quick start -8장/</id>
    <published>2020-04-12T04:39:05.000Z</published>
    <updated>2020-04-12T15:39:55.117Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성</p></blockquote><h1 id="8장-모듈"><a href="#8장-모듈" class="headerlink" title="8장 모듈"></a>8장 모듈</h1><h2 id="📝253p-모듈-필요성"><a href="#📝253p-모듈-필요성" class="headerlink" title="📝253p. 모듈 필요성"></a>📝253p. 모듈 필요성</h2><ol><li>유지보수</li><li>전역 스코프 오염 방지</li><li>재사용성</li></ol><h3 id="모듈러-프로그래밍-기반-과정"><a href="#모듈러-프로그래밍-기반-과정" class="headerlink" title="모듈러 프로그래밍 기반 과정"></a>모듈러 프로그래밍 기반 과정</h3><ol><li>모듈 식별</li><li>모듈 분리 선언</li><li>외부 공개</li></ol><h2 id="📝254p-내부-모듈-외부-모듈-차이"><a href="#📝254p-내부-모듈-외부-모듈-차이" class="headerlink" title="📝254p. 내부 모듈, 외부 모듈 차이"></a>📝254p. 내부 모듈, 외부 모듈 차이</h2><p>타입스크립트 1.5부터 <code>Namespce</code>라는 특징과 ES6 모듈 특지이 추가 ECMAScript 표준 용어집에 2가지 형태의 모듈 구분</p><ol><li>내부 모듈 - <code>namespace</code></li><li>외부 모듈 - <code>export</code></li></ol><p>내부모듈, <code>namespace</code>란 여러 파일에 걸쳐 하나의 이름을 공유, <code>reference</code>를 통해 참조</p><p>외부모듈은 파일마다 이름 공간이 정해짐, <code>import</code>를 통해 참조</p><p>그러므로, <code>namespace</code>는 프로젝트와 분리해 라이브러리 단위의 모듈을 구성할 때 좋음</p><blockquote><p><code>@types</code> 폴더에서 구분하여 타입선언 등 을 하는 듯 하다</p></blockquote><h2 id="📝259p-Namespace"><a href="#📝259p-Namespace" class="headerlink" title="📝259p. Namespace"></a>📝259p. Namespace</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Hello &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="namespace-module"><a href="#namespace-module" class="headerlink" title="namespace = module"></a>namespace = module</h3><p>키워드는 다르지만, 역할과 기능상 차이가 없습니다</p><h4 id="키워드-중복-이유"><a href="#키워드-중복-이유" class="headerlink" title="키워드 중복 이유"></a>키워드 중복 이유</h4><p>ES2015에서 <code>namespace</code> 용어가 표준으로 채택되면서, 원래 Typescript 1.5에서 사용하던 <code>module</code> 용어가 자연스럽게 Deprecated됨</p><blockquote><p>그런데, Typescript 타입 만드는 example code를 보면 아직은 module이라는 용어가 많이 쓰이는 듯 하다</p><p><a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/chart.js/index.d.ts" target="_blank" rel="noopener">참고링크 - chart.js</a></p><p><a href="https://www.slideshare.net/gloridea/dts-74589285" target="_blank" rel="noopener">여기</a>는 왜 <code>module</code>과 <code>namespace</code>를 동시에 사용한걸까? </p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// namespace 사용 예시</span></span><br><span class="line"><span class="keyword">namespace</span> Hello &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// module 사용 예시</span></span><br><span class="line"><span class="keyword">module</span> Hello &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6 변환 결과</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Hello;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>: <span class="title">Hello</span>) </span>&#123;</span><br><span class="line">    funtion print() &#123;&#125;</span><br><span class="line">&#125;(Hello || (Hello = &#123;&#125;));<span class="comment">// 모듈이 있으면 전달, 없으면 초기화 = 느슨한 확장 loose argument</span></span><br></pre></td></tr></table></figure><h2 id="📝261p-한-파일에-여러-네임스페이스-선언"><a href="#📝261p-한-파일에-여러-네임스페이스-선언" class="headerlink" title="📝261p. 한 파일에 여러 네임스페이스 선언"></a>📝261p. 한 파일에 여러 네임스페이스 선언</h2><p>네임스페이스마다 구분이 필요하게 되므로, <code>export</code> 선언 필요</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> MyInfo1 &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">`name1`</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MyInfo2.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">namespace</span> MyInfo2 &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">`name2`</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MyInfo1.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">console</span>.log(MyInfo1.getName());</span><br><span class="line"><span class="built_in">console</span>.log(MyInfo2.getName());</span><br></pre></td></tr></table></figure><p>변환시 <code>var</code>로 변환되어 호이스팅 특성때문에 순서와 상관없이 서로 호출 가능</p><h2 id="📝263p-★-네임스페이스-여러-파일에-선언"><a href="#📝263p-★-네임스페이스-여러-파일에-선언" class="headerlink" title="📝263p. ★ 네임스페이스 여러 파일에 선언"></a>📝263p. ★ 네임스페이스 여러 파일에 선언</h2><p>프로젝트 규모 커지면, 파일 단위로 모듈을 분할</p><p><code>tsc</code> 명령시, 타입스크립트 컴파일러가 자동으로 네임스페이스간 참조 관계를 고려함</p><p>그러나, 개별 파일을 컴파일시에는 <code>///&lt;reference path=&quot;to/path&quot; /&gt;</code>가 필요함</p><p>파일 상단의 표시하면 됨</p><p>그러나, 사실 <code>tsc</code> 명령어로도 같이</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ts-node car2.ts <span class="comment"># undefined, undefined 출력</span></span><br><span class="line"></span><br><span class="line">tsc --out out.js car2.ts <span class="comment"># 합쳐 컴파일 필요</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>ts-node car2.ts</th><th>tsc -out out.js car2.ts</th></tr></thead><tbody><tr><td><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200413001659451.png" alt="image-20200413001659451"></td><td><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200413001720503.png" alt="image-20200413001720503"></td></tr></tbody></table><p>컴파일 후에도, 결과를 명시적으로 표시되게 하려면, 네임스페이스를 모듈로 선언하고 <code>import</code>를 선언 필요</p><p>(다음장에서 설명됨)</p><h2 id="📝268p-네임스페이스-모듈"><a href="#📝268p-네임스페이스-모듈" class="headerlink" title="📝268p. 네임스페이스 모듈"></a>📝268p. 네임스페이스 모듈</h2><h3 id="사용법"><a href="#사용법" class="headerlink" title="사용법"></a>사용법</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// car1.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Car &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">let</span> auto: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> ICar &#123;</span><br><span class="line">        name: <span class="built_in">string</span>;</span><br><span class="line">        vendor: <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ns <span class="keyword">from</span> <span class="string">'./car1'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// namespace를 한번 더 선언해서 사용? 이유가 있나?</span></span><br><span class="line"><span class="keyword">namespace</span> Car &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ns.Car.auto);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> Taxi <span class="keyword">implements</span> ns.Car.ICar &#123;</span><br><span class="line">        name: <span class="built_in">string</span>;</span><br><span class="line">        vendor: <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">console</span>.log(ns.Car.auto);</span><br></pre></td></tr></table></figure><h2 id="📝271p-네임스페이스-이름-확장"><a href="#📝271p-네임스페이스-이름-확장" class="headerlink" title="📝271p. 네임스페이스 이름 확장"></a>📝271p. 네임스페이스 이름 확장</h2><p>네임스페이스 이름은 <code>.</code>을 허용, 이름 계층 확장하는데 사용</p><p><strong>사용 예시</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 순서 바뀌어도 문제는 없지만, 상위에서 하위로 선언하는게 맞음</span></span><br><span class="line"><span class="keyword">namespace</span> Animal&#123;&#125;</span><br><span class="line"><span class="keyword">namespace</span> Animal.Pet&#123;&#125;</span><br></pre></td></tr></table></figure><p>그러나 상속에 개념이 전혀 아니고, 서로 다른 네임스페이스이므로, 변수나 메소드 공유 X</p><h2 id="📝274p-브라우저에서-네임스페이스-모듈-호출"><a href="#📝274p-브라우저에서-네임스페이스-모듈-호출" class="headerlink" title="📝274p. 브라우저에서 네임스페이스 모듈 호출"></a>📝274p. 브라우저에서 네임스페이스 모듈 호출</h2><blockquote><p> 네임스페이스간 결국 js에는 없는 개념으로, 순서대로 js 스크립트 호출해서 사용해야한다는 것 같음</p></blockquote><h2 id="📝276p-모듈-사용법"><a href="#📝276p-모듈-사용법" class="headerlink" title="📝276p. 모듈 사용법"></a>📝276p. 모듈 사용법</h2><h3 id="개별-export"><a href="#개별-export" class="headerlink" title="개별 export"></a>개별 export</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> ICar &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ICar, Test &#125; <span class="keyword">from</span> <span class="string">'../to/path'</span>;</span><br></pre></td></tr></table></figure><h3 id="함께-export"><a href="#함께-export" class="headerlink" title="함께 export"></a>함께 export</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ver: <span class="built_in">string</span> = <span class="string">`1.0`</span>;</span><br><span class="line"><span class="keyword">let</span> display = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">`hello`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; ver, display &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ver, display &#125; <span class="keyword">from</span> <span class="string">'../to/path'</span>;</span><br></pre></td></tr></table></figure><h3 id="모두-export"><a href="#모두-export" class="headerlink" title="모두 export"></a>모두 export</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> ver: <span class="built_in">string</span> = <span class="string">`1.0`</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> display = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">`hello`</span>;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m <span class="keyword">from</span> <span class="string">'./to/path'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(m.ver);</span><br><span class="line"><span class="built_in">console</span>.log(m.display());</span><br></pre></td></tr></table></figure><h3 id="모듈-재노출"><a href="#모듈-재노출" class="headerlink" title="모듈 재노출"></a>모듈 재노출</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'../to/path'</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'../to/path'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m <span class="keyword">from</span> <span class="string">'./to/path'</span>;</span><br></pre></td></tr></table></figure><p>모듈 파일을 가져와서 다시 <code>export</code> 하는 예시, 최상위에 모듈에서 많이 사용됨</p><h2 id="📝281p-★네임스페이스로-감싸서-재노출"><a href="#📝281p-★네임스페이스로-감싸서-재노출" class="headerlink" title="📝281p. ★네임스페이스로 감싸서 재노출"></a>📝281p. ★네임스페이스로 감싸서 재노출</h2><blockquote><p>namepsace 간 class보다 상위의 개념이기 때문에 감싸서 노출하면 편한 것 같다</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// car-info.module.ts &lt;- 모듈 파일 명명법</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> CarInfo &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CarInfo &#125; <span class="keyword">from</span> <span class="string">'./car-info.module'</span>;</span><br><span class="line"></span><br><span class="line">CarInfo.hello();</span><br></pre></td></tr></table></figure><h2 id="📝283p-디폴트-무법"><a href="#📝283p-디폴트-무법" class="headerlink" title="📝283p. 디폴트 무법"></a>📝283p. 디폴트 무법</h2><h3 id="export-equals-import-equals-문"><a href="#export-equals-import-equals-문" class="headerlink" title="export-equals, import-equals 문"></a>export-equals, import-equals 문</h3><blockquote><p><code>default</code> 이전에 사용됬던 방식인 것 같은데, 몰랐던 부분 - 가끔 다른 프로젝트에서 종종 보였는데 이런 의미였구나</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> = Chart;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 동일</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Chart;</span><br><span class="line"><span class="keyword">export</span> &#123;  Chart <span class="keyword">as</span> <span class="keyword">default</span> &#125;;</span><br></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Validator <span class="keyword">from</span> <span class="string">'./validator'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 동일</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> Validator &#125; <span class="keyword">from</span> <span class="string">'./validator'</span>;</span><br></pre></td></tr></table></figure><h3 id="주의사항"><a href="#주의사항" class="headerlink" title="주의사항"></a>주의사항</h3><p>모듈 하나당 <code>default</code>는 하나만 선언 가능</p><h2 id="📝289-313p-모듈시스템-생략"><a href="#📝289-313p-모듈시스템-생략" class="headerlink" title="📝289 ~ 313p. 모듈시스템 생략"></a>📝289 ~ 313p. 모듈시스템 생략</h2><blockquote><p>모듈 시스템은 각 파트마다 다르기 때문에 웹개발자라면 ES2015모듈을, Node.js개발자라면 CommonJs 모듈 형식을 기본으로 알고, 나머지는 상황에 따라 알아야할 것 같다</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;8장-모듈&quot;&gt;&lt;a href=&quot;#8장-모듈&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Typescript" scheme="https://typescript-study.github.io/categories/Typescript/"/>
    
    
      <category term="Typescript" scheme="https://typescript-study.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Quick Start Typescript ~ 7장 정리</title>
    <link href="https://typescript-study.github.io/wiki/Typescript%20quick%20start%20-7%EC%9E%A5/"/>
    <id>https://typescript-study.github.io/wiki/Typescript quick start -7장/</id>
    <published>2020-04-05T04:39:05.000Z</published>
    <updated>2020-04-12T15:42:19.454Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성</p><p>분량이 많아, 이미 아는 내용이나 자주 사용하는 부분은 생략함</p></blockquote><h1 id="7장-클래스와-인터페이스-목차"><a href="#7장-클래스와-인터페이스-목차" class="headerlink" title="7장 클래스와 인터페이스 목차"></a>7장 클래스와 인터페이스 목차</h1><h2 id="📝183p-타입스크립트의-객체지향-프로그래밍-지원"><a href="#📝183p-타입스크립트의-객체지향-프로그래밍-지원" class="headerlink" title="📝183p. 타입스크립트의 객체지향 프로그래밍 지원"></a>📝183p. 타입스크립트의 객체지향 프로그래밍 지원</h2><p>객체지향의 목적은 코드 중복을 최소화</p><p>ES6에서 <code>class</code> 키워드가 추가되면서 부족한 점이 존재</p><table><thead><tr><th>객체지향 프로그래밍 요소</th><th>Js(ES6)</th><th>Ts</th></tr></thead><tbody><tr><td>클래스</td><td>class</td><td>class</td></tr><tr><td>인터페이스</td><td>★지원안함</td><td>interface</td></tr><tr><td>인터페이스 구현</td><td>★지원안함</td><td>implements</td></tr><tr><td>상속</td><td>extends</td><td>extends</td></tr><tr><td>생성자</td><td>constructor(){}</td><td>constructor(){}</td></tr><tr><td>접근 제한자</td><td>★지원안함</td><td>private, public, protected</td></tr><tr><td>final 제한자</td><td>★지원안함</td><td>readonly(Ts 2.0부터)</td></tr><tr><td>static 키워드</td><td>static</td><td>static</td></tr><tr><td>super 키워드</td><td>super</td><td>super</td></tr></tbody></table><blockquote><p>제한자의 경우, 실제 Js로 변환됬을 경우, 사라지는 부분으로 개발상에서만 제한의 의미가 있는 것이 아쉽다</p></blockquote><h2 id="📝p187-기존Js-prototype-vs-class-비교"><a href="#📝p187-기존Js-prototype-vs-class-비교" class="headerlink" title="📝p187. 기존Js(prototype) vs class 비교"></a>📝p187. 기존Js(prototype) vs class 비교</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 기존 Js Prototype 객체지향 프로그래밍</span></span><br><span class="line"><span class="keyword">var</span> Rectangle = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Rectangle.prototype.getArea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x * <span class="keyword">this</span>.y;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> Rectangle;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rectangle = <span class="keyword">new</span> Rectangle(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> area = rectangle.getArea();</span><br><span class="line"><span class="built_in">console</span>.log(area);</span><br></pre></td></tr></table></figure><p>모듈 패턴은 클로저를 이용해 비공개된 내부 메소드를 캡슐화하여, 전역공간을 더럽히지 않는 장점 존재</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class 객체지향 프로그래밍</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Rectangle &#123;</span><br><span class="line">    x: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">    getArea(): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Rectanlge &#123;</span><br><span class="line">    x: numberl</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    getArea(): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x * <span class="keyword">this</span>.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝p188-상속-extends-포함-2-관계"><a href="#📝p188-상속-extends-포함-2-관계" class="headerlink" title="📝p188. 상속(extends), 포함(2) 관계"></a>📝p188. 상속(extends), 포함(2) 관계</h2><p>상속 생략</p><h3 id="포함-관계"><a href="#포함-관계" class="headerlink" title="포함 관계"></a>포함 관계</h3><ol><li>합성(composition) - 강한관계</li><li>집합(aggregation) - 약한관계</li></ol><h4 id="합성"><a href="#합성" class="headerlink" title="합성"></a>합성</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Engine&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> Car &#123;</span><br><span class="line">    <span class="keyword">private</span> Engine;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.engine = <span class="keyword">new</span> Engine();<span class="comment">// 인스턴스 생성</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myCar = <span class="keyword">new</span> Car();</span><br><span class="line">myCar = <span class="literal">null</span>;<span class="comment">// null이 되면 포함된 클래스 함께 제거</span></span><br></pre></td></tr></table></figure><h4 id="집합"><a href="#집합" class="headerlink" title="집합"></a>집합</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Engine&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> Car &#123;</span><br><span class="line">    <span class="keyword">private</span> engine: Engine;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">engine: Engine</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.engine = engine;<span class="comment">// 인스턴스 생성</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> engine = <span class="keyword">new</span> Engine();<span class="comment">// engine 인스턴스 별도로 선언</span></span><br><span class="line"><span class="keyword">let</span> car = <span class="keyword">new</span> Car(engine);<span class="comment">// 인스턴스 생성시, 포함되는 클래스를 같이 전달</span></span><br></pre></td></tr></table></figure><p>위 코드(합성)과의 차이점은 집합은 <code>car</code> 객체가 제거되더라도,<br><code>engine</code> 객체는 외부에서 선언되었기 때문에 제거되지않음 (수명주기를 함께하지 않기때문에 약한관계)</p><blockquote><p>실무에서는 어디에 주로 사용될까?</p></blockquote><h2 id="📝p192-접근-제한자"><a href="#📝p192-접근-제한자" class="headerlink" title="📝p192. 접근 제한자"></a>📝p192. 접근 제한자</h2><table><thead><tr><th>접근 제한자</th><th>특징</th><th>상속 여부</th><th>외부 객체 접근</th></tr></thead><tbody><tr><td>public</td><td>외부 또는 자식클래스에서 접근 가능</td><td>O</td><td>O</td></tr><tr><td>protected</td><td>자식 클래스에서 접근 가능</td><td>O</td><td>X</td></tr><tr><td>private</td><td>해당 클래스에서만 접근 가능</td><td>X</td><td>X</td></tr></tbody></table><h2 id="📝p195-축약-코딩기법"><a href="#📝p195-축약-코딩기법" class="headerlink" title="📝p195. 축약 코딩기법"></a>📝p195. 축약 코딩기법</h2><p>챕터와 상관없지만, 관련 있는 변수 묶어서 선언하기 좋아보여서 기록</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [cWidth, cLength, cHeight] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h2 id="📝p195-접근-제한자-선언-gt-클래스-매개변수가-됨"><a href="#📝p195-접근-제한자-선언-gt-클래스-매개변수가-됨" class="headerlink" title="📝p195. 접근 제한자 선언 &gt; 클래스 매개변수가 됨"></a>📝p195. 접근 제한자 선언 &gt; 클래스 매개변수가 됨</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Cube &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> width: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    getWidth() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> cube = <span class="keyword">new</span> Cube(<span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(cube.width);<span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h2 id="📝p197-get-set-코딩스타일"><a href="#📝p197-get-set-코딩스타일" class="headerlink" title="📝p197. get/set 코딩스타일"></a>📝p197. get/set 코딩스타일</h2><blockquote><p>매개변수/getter/setter 한꺼번에 모아서 관리</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PC</span> </span>&#123;</span><br><span class="line">    ram = <span class="string">`0G`</span>;</span><br><span class="line"><span class="keyword">get</span> ramCapcity() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.ram;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">set</span> ramCapcity(value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.ram = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝p197-부모-클래스-멤버-변수-이용"><a href="#📝p197-부모-클래스-멤버-변수-이용" class="headerlink" title="📝p197. 부모 클래스 멤버 변수 이용"></a>📝p197. 부모 클래스 멤버 변수 이용</h2><p><code>super()</code> 키워드와 <code>this</code> 사용</p><p><code>super</code>는 부모 클래스의 공개 멤버(<code>public</code>)에만 접근 가능</p><p><code>this</code>는 부모에게 상속받은 멤버와 현재 클래스 모두 접근 가능</p><h2 id="📝p199-기본-접근-제한자"><a href="#📝p199-기본-접근-제한자" class="headerlink" title="📝p199. 기본 접근 제한자"></a>📝p199. 기본 접근 제한자</h2><p><strong>잘못 알고 있던 사항</strong></p><p>constructor 매개변수에서 접근 제한자를 설정 안할시, default가 <code>public</code>일줄 알았는데 <code>private</code> 임</p><p>접근 제한자를 생략할 경우, 생성자 외부에서 매개변수에 접근할 수 없음!</p><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200406023739559.png" alt="image-20200406023739559"></p><h2 id="📝p202-추상-클래스를-이용한-공통-기능-정의"><a href="#📝p202-추상-클래스를-이용한-공통-기능-정의" class="headerlink" title="📝p202. 추상 클래스를 이용한 공통 기능 정의"></a>📝p202. 추상 클래스를 이용한 공통 기능 정의</h2><blockquote><p>언제 사용될까? 실무에서 자주 사용되는 케이스가 궁금</p></blockquote><p>구현 메소드는 실제 구현 내용을 포함</p><p>추상 메소드는 선언만된 메소드, 그러므로 자식 클래스에서 추상 메소드를 받아 별도 구현해야함</p><p>! 추상 메서드나 추상 멤버 변수는 자식 클래스에서 사용(<code>overriding</code>)할 수 있게 <code>public</code>으로 선언해야함</p><p>추상 클래스에 기반은 둔 구현 방식은 템플릿 메서드 패턴으로 많이 알려짐</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> AbstractBird &#123;</span><br><span class="line">  <span class="keyword">abstract</span> name: <span class="built_in">string</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">abstract</span> flySound(sound: <span class="built_in">string</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 구현 메소드가 있어도 상관이 없나보네</span></span><br><span class="line">  fly(): <span class="built_in">void</span> &#123;        </span><br><span class="line">      <span class="keyword">this</span>.flySound(<span class="string">`<span class="subst">$&#123;this.name&#125;</span>: 파닥`</span>);</span><br><span class="line">  &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> RealBird <span class="keyword">extends</span> AbstractBird &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 오버라이딩</span></span><br><span class="line">  flySound(sound: <span class="built_in">string</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this.name&#125;</span> 날아감`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dogBird = <span class="keyword">new</span> RealBird(<span class="string">`새`</span>);</span><br><span class="line">dogBird.fly();<span class="comment">// 새 날아감</span></span><br></pre></td></tr></table></figure><h2 id="📝-p205-Interface-다중-상속"><a href="#📝-p205-Interface-다중-상속" class="headerlink" title="📝 p205. Interface 다중 상속"></a>📝 p205. Interface 다중 상속</h2><blockquote><p>몰랐던 부분</p></blockquote><p>자식 인터페이스는 여러 부모 인터페이스를 다중 상속 가능</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Car &#123; speed: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">interface</span> SportsCar &#123; acceleration: <span class="built_in">number</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> MyOptimizedCar <span class="keyword">extends</span> Car, SportsCar &#123;</span><br><span class="line">    waterproof: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myCar = &lt;MyOptimizedCar&gt;&#123;&#125;;<span class="comment">// ?? 인터페이스만으로 인스턴스를 만들 수 있는건가?</span></span><br><span class="line">myCar.speed = <span class="number">100</span>;</span><br><span class="line">myCar.acceleration = <span class="number">100</span>;</span><br><span class="line">myCar.waterproof = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>! 만약 다중 상속 받을 때, 같은 이름의 메소드를 상속받으면 재정의해야함</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Dog &#123;</span><br><span class="line">    run(): <span class="built_in">void</span>;</span><br><span class="line">    getStatus(): &#123;</span><br><span class="line">        runningSpeed: <span class="built_in">number</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Bird &#123;</span><br><span class="line">    fly(): <span class="built_in">void</span>;</span><br><span class="line">    getStatus(): &#123;</span><br><span class="line">        flightSpeed: <span class="built_in">number</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> DogBird <span class="keyword">extends</span> Dog, Bird &#123;</span><br><span class="line">    getStatus(): &#123;</span><br><span class="line">        runningSpeed: <span class="built_in">number</span>,</span><br><span class="line">        flightSpeed: <span class="built_in">number</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> NewAnimal <span class="keyword">implements</span> DogBird &#123;</span><br><span class="line">    run(): <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">    fly(): <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">    getStatus(): &#123; runningSpeed: <span class="built_in">number</span>, flightSpeed: <span class="built_in">number</span>; &#125; &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            runningSpeed: <span class="number">10</span>,</span><br><span class="line">            flightSpeed: <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝p212-클래스를-배열-요소로-보고-배열-타입-선언"><a href="#📝p212-클래스를-배열-요소로-보고-배열-타입-선언" class="headerlink" title="📝p212. 클래스를 배열 요소로 보고 배열 타입 선언"></a>📝p212. 클래스를 배열 요소로 보고 배열 타입 선언</h2><blockquote><p>몰랐던 부분</p><p>클래스 자체를 타입 선언 부분에 넣을 수 있음</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">public</span> full: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, <span class="keyword">public</span> city: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.full = name + <span class="string">`(<span class="subst">$&#123;city&#125;</span>)`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> personArray: Person[] = [</span><br><span class="line"><span class="keyword">new</span> Person(<span class="string">`kim`</span>, <span class="string">`name`</span>),</span><br><span class="line">    <span class="keyword">new</span> Person(<span class="string">`kang`</span>, <span class="string">`name`</span>)</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="📝p215-인터페이스에-함수-타입-정의"><a href="#📝p215-인터페이스에-함수-타입-정의" class="headerlink" title="📝p215. 인터페이스에 함수 타입 정의"></a>📝p215. 인터페이스에 함수 타입 정의</h2><p>익명 함수에 대한 함수 타입 정의 <code>()</code>를 사용하면 정의 할 수 있음</p><p>! 매개 변수 이름과 타입이 일치하지 않더라도 상관이 없음 (??? 이유가 뭘까)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IFormat &#123;</span><br><span class="line">    (data: <span class="built_in">string</span>, toUpper?: <span class="built_in">boolean</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> format: IFormat = <span class="function"><span class="keyword">function</span> (<span class="params">data: <span class="built_in">string</span>, toUpper: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> format: IFormat = <span class="function"><span class="keyword">function</span> (<span class="params">str: <span class="built_in">string</span>, isUpper: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝p216-오버라이딩"><a href="#📝p216-오버라이딩" class="headerlink" title="📝p216. 오버라이딩"></a>📝p216. 오버라이딩</h2><p>오버라이딩 = 부모에서 상속받아, 자식 클래스에서 새로 구현하는 방법</p><p><strong>두 가지 조건 필요</strong></p><ol><li><p>조건1: 부모클래스의 매개변수 타입이 같거나 상위 타입이여야함</p></li><li><p>조건2: 부모클래스의 매개변수 개수가 같거나 많아야 함</p></li></ol><h2 id="📝p219-오버로딩"><a href="#📝p219-오버로딩" class="headerlink" title="📝p219. 오버로딩"></a>📝p219. 오버로딩</h2><p>오버로딩 = 메서드의 이름은 같지만 매개변수의 타입과 개수가 다르게 정의하는 방법</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 점점 상위의 타입으로 선언</span></span><br><span class="line">typeCheck(value: <span class="built_in">number</span>);</span><br><span class="line">typeCheck(value: <span class="built_in">string</span>);</span><br><span class="line">typeCheck(value: <span class="built_in">any</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">`number`</span>) <span class="built_in">console</span>.log(<span class="string">`this is number`</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">`string`</span>) <span class="built_in">console</span>.log(<span class="string">`this is string`</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">`nothing`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝p222-인터페이스를-클래스에서-구현하여-오버로딩"><a href="#📝p222-인터페이스를-클래스에서-구현하여-오버로딩" class="headerlink" title="📝p222. 인터페이스를 클래스에서 구현하여 오버로딩"></a>📝p222. 인터페이스를 클래스에서 구현하여 오버로딩</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPoint &#123;</span><br><span class="line">    getX(x: <span class="built_in">any</span>): <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Point <span class="keyword">implements</span> IPoint &#123;</span><br><span class="line">    getX(x?: <span class="built_in">number</span> | <span class="built_in">string</span>): <span class="built_in">any</span> &#123;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>! 인터페이스를 이용하면 선언과 구현을 분리하고 구현부의 구조를 강제</p><p>이 점에서 로직과 구조가 섞여 있는 클래스를 상속해 오버로딩하는 것보다</p><p>구조만을 가지고 있는 인터페이스를 이용하는 것이 복잡고 낮습니다.</p><h2 id="📝p224-다형성"><a href="#📝p224-다형성" class="headerlink" title="📝p224. 다형성"></a>📝p224. 다형성</h2><h3 id="종류"><a href="#종류" class="headerlink" title="종류"></a>종류</h3><ol><li>클래스의 다형성</li><li>인터페이스의 다형성</li><li>매개변수의 다형성</li></ol><h3 id="클래스의-다형성"><a href="#클래스의-다형성" class="headerlink" title="클래스의 다형성"></a>클래스의 다형성</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Planet &#123;</span><br><span class="line">    stopTransduction(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`stop - planet`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Earth <span class="keyword">extends</span> Planet &#123;</span><br><span class="line">    <span class="keyword">public</span> features: <span class="built_in">string</span>[] = [<span class="string">`soil`</span>, <span class="string">`water`</span>, <span class="string">`oxyzen`</span>];</span><br><span class="line"></span><br><span class="line">    stopTransduction(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`stop - earth`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    earthStop(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`stop2 - earth`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> earth: Planet = <span class="keyword">new</span> Earth();<span class="comment">// ★ Earth 인스턴스를 생성했지만, 타입은 상위의 Planet임</span></span><br><span class="line">earth.stopTransduction();<span class="comment">// stop - earth, 인스턴스의 메소드를 사용</span></span><br><span class="line"><span class="built_in">console</span>.log(earth.features);<span class="comment">// Error, 접근 불가</span></span><br><span class="line">earth.earthStop();<span class="comment">// Error, 오버라이딩 되지 않은 메소드는 접근 불가</span></span><br></pre></td></tr></table></figure><p>부모 클래스의 타입을 지정받은 인스턴스는 실제 동작은 부모 클래스 기준으로 실행됨</p><p>그래서 자식 클래스 멤버 변수(<code>features</code>)에 접근할 수 없음</p><p>그러나, 메소드 자체는 자식 인스턴스의 것이 실행됨 (런타임 다형성(runtime polymorphism)), ex. <code>duck typing</code></p><h3 id="인터페이스의-다형성"><a href="#인터페이스의-다형성" class="headerlink" title="인터페이스의 다형성"></a>인터페이스의 다형성</h3><blockquote><p>클래스와 다르지 않아 코드만 적고 생략</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPerson &#123;</span><br><span class="line">    getAlias: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">    getAge(): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> PoliceMan <span class="keyword">implements</span> IPerson &#123;</span><br><span class="line">    getAlias = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">`happy`</span>;</span><br><span class="line">    </span><br><span class="line">    getAge(): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    hasClub() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> policeMan: IPerson = <span class="keyword">new</span> PoliceMan();</span><br><span class="line"><span class="built_in">console</span>.log(policeMan.hasClub());<span class="comment">// Error, 접근 불가</span></span><br></pre></td></tr></table></figure><h3 id="매개변수의-다형성-유니언-타입"><a href="#매개변수의-다형성-유니언-타입" class="headerlink" title="매개변수의 다형성 (유니언 타입)"></a>매개변수의 다형성 (유니언 타입)</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display(data: <span class="built_in">string</span> | <span class="built_in">number</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="문제점"><a href="#문제점" class="headerlink" title="문제점"></a>문제점</h4><p>타입 가드가 빡셈</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> MonitorDisplay &#123;</span><br><span class="line">    display(monitor: Led | Oled | Uhd) &#123;</span><br><span class="line">        <span class="keyword">if</span> (monitor <span class="keyword">instanceof</span> Led) &#123;&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (monitor <span class="keyword">instanceof</span> Oled) &#123;&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (monitor <span class="keyword">instanceof</span> Uhd) &#123;</span><br><span class="line">            <span class="keyword">let</span> myMonitor: Uhd = &lt;Uhd&gt;monitor;</span><br><span class="line">            <span class="keyword">return</span> myMonitor.getName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>type</code> 키워드시 축약은 가능하지만 근본적인 해결책은 될 수 없음(클래스 타입 추가시마다, 매번 업데이트 필요)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 여긴 또 신기하게 대문자로 명명했네..</span></span><br><span class="line"><span class="keyword">type</span> MultiTypes = Led | Oled | Uhd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> MonitorDisplay &#123;</span><br><span class="line">    display(monitor: MultiTypes) &#123; ...(<span class="keyword">if</span>들) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="★★-매개변수의-다형성-인터페이스"><a href="#★★-매개변수의-다형성-인터페이스" class="headerlink" title="★★ 매개변수의 다형성 (인터페이스)"></a>★★ 매개변수의 다형성 (인터페이스)</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Monitor &#123;</span><br><span class="line">    getName(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Led <span class="keyword">implements</span> Monitor &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">    getName(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`LED: `</span> + <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Oled <span class="keyword">implements</span> Monitor &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">    getName(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Oled: `</span> + <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> MonitorDisplay &#123;</span><br><span class="line">    display(monitor: Monitor) &#123;</span><br><span class="line">        <span class="keyword">let</span> myMonitor: Monitor = monitor;</span><br><span class="line">        <span class="keyword">return</span> myMonitor.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if문 없이 코딩이 가능함</p><h2 id="📝p236-getter-setter-사용-이유"><a href="#📝p236-getter-setter-사용-이유" class="headerlink" title="📝p236. getter/setter 사용 이유"></a>📝p236. getter/setter 사용 이유</h2><p>굳이 <code>this.name = &#39;anything&#39;</code> 처럼 멤버 변수를 사용하지 않고 <code>get/set</code> 키워드를 사용하는 이유</p><p>값을 설정하거나 읽을 때, 로직을 추가 가능(= 조건 추가 가능)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span> name(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.studentName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> name(name: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (name.includes(<span class="string">`happy`</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.studentName = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ES5-변환시"><a href="#ES5-변환시" class="headerlink" title="ES5 변환시"></a>ES5 변환시</h3><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">Object.defineProperty</a> 참고</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(Student.prototype, <span class="string">`name`</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>: function() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.studentName;</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="keyword">set</span>: function(name) &#123;</span><br><span class="line">        <span class="keyword">if</span> (name.includes(<span class="string">`happy`</span>)) <span class="keyword">this</span>.studentName = name;</span><br><span class="line">    &#125;,</span><br><span class="line">    enumerable: <span class="literal">true</span>,<span class="comment">// true: 객체 키 열거 가능, default: false</span></span><br><span class="line">    configurable: <span class="literal">true</span><span class="comment">// true: 이 속성 값 수정/삭제 가능, default: false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> Student.prototype) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(prop);<span class="comment">// 여기에 enumerable 하지 않으면 표시되지 않음</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝p240-static"><a href="#📝p240-static" class="headerlink" title="📝p240. static"></a>📝p240. <code>static</code></h2><p><code>static</code> 키워드는 객체 생성 없이  접근 가능하므로 메모리 절약 효과 존재</p><p>객체 생성 없이 바로 접근 가능</p><p><code>static</code> 멤버 변수는 인스턴스간 값 공유</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Circle &#123;</span><br><span class="line">    <span class="keyword">static</span> circleArea: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">get</span> area(): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Circle.circleArea;<span class="comment">// this가 아닌 Circle을 사용했음</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">set</span> area(pArea: <span class="built_in">number</span>) &#123;</span><br><span class="line">        Circle.circleArea = pArea;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Circle.area = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> circle = <span class="keyword">new</span> Circle();</span><br><span class="line"><span class="built_in">console</span>.log(circle.area);<span class="comment">// 100, 공유되는 것을 확인</span></span><br></pre></td></tr></table></figure><h2 id="📝p242-싱글톤-패턴"><a href="#📝p242-싱글톤-패턴" class="headerlink" title="📝p242. 싱글톤 패턴"></a>📝p242. 싱글톤 패턴</h2><p><code>static</code> 키워드를 활용하면 유일한 상태 정보 저장 가능</p><p>이렇게 하기위해서는 객체 생성을 막고, 클래스 변수, 메소드 등 모두를 <code>static</code>으로 선언</p><p>단일 상태 관리에는 좋지만, 인스턴스 생성은 불가능</p><p><strong>생성법</strong></p><ol><li>부지런한 초기화 (eager initalization) - 클래스 선언시 초기화</li><li>게으른 초기화 (lazy initalization) - 메소드 호출시 초기화</li></ol><h3 id="Eager-Initalization"><a href="#Eager-Initalization" class="headerlink" title="Eager Initalization"></a>Eager Initalization</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> EagerLogger &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> uniqueObj: EagerLogger = <span class="keyword">new</span> EagerLogger();<span class="comment">// 내부에서 자체적 선언</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// private를 붙여 인스턴스 생성 방지</span></span><br><span class="line">    <span class="keyword">private</span> EagerLogger() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// static으로 외부 접근 허용</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> getLogger(): EaggerLogger &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.uniqueObj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lazy-Initalization"><a href="#Lazy-Initalization" class="headerlink" title="Lazy Initalization"></a>Lazy Initalization</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> LazyLogger &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> uniqueObj: LazyLogger;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> LazyLogger() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> getLogger(): LazyLogger &#123;</span><br><span class="line">        <span class="comment">// 생성된 적이 없으면 새로 생성, 타입은 LazyLogger이므로 ==로 타입검사 피함</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.uniqueObj == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.uniqueObj = <span class="keyword">new</span> LazyLogger();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.uniqueObj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝p247-readonly-vs-const"><a href="#📝p247-readonly-vs-const" class="headerlink" title="📝p247. readonly vs const"></a>📝p247. readonly vs const</h2><blockquote><p><code>const</code>가 사용되는 곳은 <code>readonly</code>를 사용하지 못한다고 이해하면 편한 것 같다</p></blockquote><table><thead><tr><th>특성</th><th>const</th><th>readonly</th></tr></thead><tbody><tr><td>상수 선언</td><td>가능</td><td>가능</td></tr><tr><td>초기화 강제성</td><td>필수</td><td>선택</td></tr><tr><td>값 재할당</td><td>불가능</td><td>가능(?)</td></tr><tr><td>선언 가능 대상</td><td>변수</td><td>멤버 변수<br>객체 리터럴<br>새타입</td></tr><tr><td>선언 불가능 대상</td><td>멤버 변수<br>객체 리터럴<br>새타입</td><td>변수</td></tr><tr><td>사용 용도</td><td>상수</td><td>읽기 전용 속성</td></tr><tr><td>컴파일 선언 유지</td><td>유지</td><td>사라짐</td></tr><tr><td>지원 표준</td><td>ES6</td><td>TS 2.0</td></tr></tbody></table><h2 id="📝p250-readonly-제거되는-경우"><a href="#📝p250-readonly-제거되는-경우" class="headerlink" title="📝p250. readonly 제거되는 경우"></a>📝p250. readonly 제거되는 경우</h2><p><code>type</code> 에일리어싱시 사라짐</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> emotion: &#123; readonly name: <span class="built_in">string</span> &#125; = &#123; name: <span class="string">`sad`</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aliasing</span>(<span class="params">pEmotion: &#123; name: <span class="built_in">string</span> &#125;</span>) </span>&#123;</span><br><span class="line">    pEmotion.name = <span class="string">`happy`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(emotion.name);<span class="comment">// sad</span></span><br><span class="line">emotion.name = <span class="string">`happy`</span>;<span class="comment">// Error</span></span><br><span class="line">aliasing(emotion);</span><br><span class="line"><span class="built_in">console</span>.log(emotion.name);<span class="comment">// happy, 변경됨</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성&lt;/p&gt;
&lt;p&gt;분량이 많아, 이미 아는 내용이나 자주 사용하는 부분은 생략함&lt;/p&gt;
&lt;/blockquote&gt;
&lt;
      
    
    </summary>
    
      <category term="Typescript" scheme="https://typescript-study.github.io/categories/Typescript/"/>
    
    
      <category term="Typescript" scheme="https://typescript-study.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Quick Start Typescript ~ 6장 정리</title>
    <link href="https://typescript-study.github.io/wiki/Typescript%20quick%20start%20-6%EC%9E%A5/"/>
    <id>https://typescript-study.github.io/wiki/Typescript quick start -6장/</id>
    <published>2020-03-22T11:39:05.000Z</published>
    <updated>2020-04-12T15:42:19.453Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성했습니다.</p></blockquote><h2 id="6장-함수-목차"><a href="#6장-함수-목차" class="headerlink" title="6장 함수 목차"></a>6장 함수 목차</h2><ol><li>사용법 (Js vs Ts 비교)</li><li>매개변수<ol><li>초기값 지정</li><li><code>...rest</code> 매개변수</li><li>선택 매개변수 지정</li><li>오버로드</li></ol></li><li>익명 함수<ol><li>화살표 함수</li><li>타입 선언</li><li>콜백 함수</li></ol></li></ol><h2 id="📝p151-함수-Js-vs-Ts-비교"><a href="#📝p151-함수-Js-vs-Ts-비교" class="headerlink" title="📝p151. 함수 (Js vs Ts 비교)"></a>📝p151. 함수 (Js vs Ts 비교)</h2><h3 id="js의-경우"><a href="#js의-경우" class="headerlink" title="js의 경우"></a>js의 경우</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">max(<span class="number">1</span>, <span class="number">10</span>);<span class="comment">// 10</span></span><br><span class="line">max(<span class="number">1</span>, <span class="number">10</span>, <span class="number">12</span>);<span class="comment">// 10, 이후 인자값은 무시당함</span></span><br><span class="line">max(<span class="string">`a`</span>, <span class="string">`b`</span>);<span class="comment">// `b`</span></span><br><span class="line">max(<span class="string">`c`</span>, <span class="string">`aaa`</span>);<span class="comment">//`c`, 으음... 문자열 첫번째값의 아스키 코드값인가?</span></span><br></pre></td></tr></table></figure><h4 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h4><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200323073951872.png" alt="이미지"></p><h3 id="ts의-경우"><a href="#ts의-경우" class="headerlink" title="ts의 경우"></a>ts의 경우</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line">max(<span class="number">1</span>, <span class="number">10</span>);<span class="comment">// 10</span></span><br><span class="line">max(<span class="number">1</span>, <span class="number">10</span>, <span class="number">12</span>);<span class="comment">// Error: 인자 개수 에러</span></span><br><span class="line">max(<span class="string">`a`</span>, <span class="string">`b`</span>);<span class="comment">// Error: 인자 타입 에러</span></span><br></pre></td></tr></table></figure><h4 id="결과-1"><a href="#결과-1" class="headerlink" title="결과"></a>결과</h4><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200323073806380.png" alt="이미지"></p><h2 id="📝p156-매개변수-초기값"><a href="#📝p156-매개변수-초기값" class="headerlink" title="📝p156. 매개변수 초기값"></a>📝p156. 매개변수 초기값</h2><p>ES6부터 매개변수의 값을 지정 받지 않아도, 초기값으로 값을 지정해줄 수 있게됨</p><p>코드도 간결해지고 complexity도 낮아짐</p><h3 id="ES6-이전"><a href="#ES6-이전" class="headerlink" title="ES6 이전"></a>ES6 이전</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">    param = param || <span class="string">`초기값`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200323074303810.png" alt="이미지"></p><h3 id="ES6-이후"><a href="#ES6-이후" class="headerlink" title="ES6 이후"></a>ES6 이후</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">param = <span class="string">`초기값`</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200323074341475.png" alt="이미지"></p><h2 id="📝p159-나머지-매개변수"><a href="#📝p159-나머지-매개변수" class="headerlink" title="📝p159. 나머지 매개변수"></a>📝p159. 나머지 매개변수</h2><p>ES6부터 생긴 기능, 정의되지 않은 매개변수를 받기 편해짐</p><h3 id="ES6-이전-1"><a href="#ES6-이전-1" class="headerlink" title="ES6 이전"></a>ES6 이전</h3><p><code>arguments</code>는 잘 사용하지 않는 방식으로 알려짐 (보안)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200323075104117.png" alt="이미지"></p><h3 id="ES6-이후-1"><a href="#ES6-이후-1" class="headerlink" title="ES6 이후"></a>ES6 이후</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200323075122656.png" alt="이미지"></p><h3 id="나머지-매개변수-타입-지정법"><a href="#나머지-매개변수-타입-지정법" class="headerlink" title="나머지 매개변수 타입 지정법"></a>나머지 매개변수 타입 지정법</h3><blockquote><p>나머지 매개변수도 타입 지정이 가능한 것을 처음 알았다</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 처음 1개 값을 지정하면, concat()같이 아무것도 받지않았을 때는 유효하지않음</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concat</span>(<span class="params">a: <span class="built_in">string</span>, ...restStr: <span class="built_in">string</span>[]</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;a&#125;</span> <span class="subst">$&#123;restStr.join(` `)&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝p162-선택-매개변수"><a href="#📝p162-선택-매개변수" class="headerlink" title="📝p162. 선택 매개변수"></a>📝p162. 선택 매개변수</h2><h3 id="js의-경우-1"><a href="#js의-경우-1" class="headerlink" title="js의 경우"></a>js의 경우</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>);<span class="comment">// NaN</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>);<span class="comment">// 3</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)<span class="comment">// 3, 이후 파라미터를 사용되진 않지만, 받음</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200323080049535.png" alt="이미지"></p><h3 id="ts"><a href="#ts" class="headerlink" title="ts"></a>ts</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a: <span class="built_in">number</span>, b?: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>);<span class="comment">// NaN, js와 결과는 동일</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>);<span class="comment">// 3</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)<span class="comment">// Error 인자 초과</span></span><br></pre></td></tr></table></figure><h2 id="📝p164-함수-오버로드"><a href="#📝p164-함수-오버로드" class="headerlink" title="📝p164. 함수 오버로드"></a>📝p164. 함수 오버로드</h2><blockquote><p>잘 몰랐던 부분</p></blockquote><p>함수명은 같지만, 매개변수와 반환 타입이 다른 여러개의 함수를 선언 가능, 런타임 비용이 별도 추가되지 않음</p><p>가장 일반적인 타입을 가장 아래에 선언(ex. <code>any</code>가 가장 아래), 위일 수록 구체적 (순서 중요!)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a: string, b: string</span>);</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">add</span>(<span class="params">a: number, b: number</span>);</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">add</span>(<span class="params">a: any, b: any</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>));<span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="string">`test1`</span>, <span class="string">`test2`</span>));<span class="comment">// test1test2</span></span><br></pre></td></tr></table></figure><h2 id="📝p170-화살표-함수-유의점"><a href="#📝p170-화살표-함수-유의점" class="headerlink" title="📝p170. 화살표 함수 유의점"></a>📝p170. 화살표 함수 유의점</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad case</span></span><br><span class="line"><span class="keyword">const</span> test = <span class="function"><span class="params">x</span> =&gt;</span> &#123; x; &#125;;<span class="comment">// block&#123;&#125;을 사용할 경우, 무조건 return이 필요함!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good case</span></span><br><span class="line"><span class="keyword">const</span> test = <span class="function"><span class="params">x</span> =&gt;</span> &#123; <span class="keyword">return</span> x; &#125;;</span><br></pre></td></tr></table></figure><h2 id="📝p171-filter-reduce"><a href="#📝p171-filter-reduce" class="headerlink" title="📝p171. filter, reduce"></a>📝p171. filter, reduce</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">filter MDN</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">reduce MDN</a></li></ul><h2 id="📝p173-객체-리터럴-선언"><a href="#📝p173-객체-리터럴-선언" class="headerlink" title="📝p173. 객체 리터럴 선언"></a>📝p173. 객체 리터럴 선언</h2><blockquote><p>개인적으로 객체 지향적으로 짤 때 좋은 코딩 스타일이라고 생각되는 문법</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name: <span class="string">`Taeuk`</span>,</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span> (<span class="params">yourName</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;yourName&#125;</span>, I'm <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.hello(<span class="string">`minsu`</span>);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200323081631307.png" alt="이미지"></p><p><strong>주의사항</strong></p><p><code>function</code>을 사용했기 때문에 <code>this.name</code>을 사용할 수 있었던 부분</p><p>만약 화살표 함수를 사용한다면 이렇게 뜰 것 이다. (현재는 this값이 window(최상위)로 잡은 케이스)</p><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200323081744796.png" alt="이미지"></p><h3 id="Typescript에서-this-타입-선언"><a href="#Typescript에서-this-타입-선언" class="headerlink" title="Typescript에서 this 타입 선언"></a>Typescript에서 <code>this</code> 타입 선언</h3><blockquote><p>잘 몰랐던 부분</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> PersonType &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    hello(<span class="keyword">this</span>: PersonType, yourName: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝p177-type-명명법"><a href="#📝p177-type-명명법" class="headerlink" title="📝p177. type 명명법"></a>📝p177. <code>type</code> 명명법</h2><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p><blockquote><p>몰랐던 부분</p></blockquote><h1 id="type는-앞이-대문자가-아님"><a href="#type는-앞이-대문자가-아님" class="headerlink" title="type는 앞이 대문자가 아님"></a><code>type</code>는 앞이 대문자가 아님</h1><blockquote><p> <code>type</code>는 대문자로 시작, 책은 소문자로 시작되서 이상해서 레퍼런스를 찾아봄</p><p>대문자로 시작하는게 표준 케이스인 것 같음</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>69d06d879cf539e94f86963fe76ebff54737f05b</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> calcType = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p><p>=======<br><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200323110341117.png" alt="공식 레퍼런스"></p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>69d06d879cf539e94f86963fe76ebff54737f05b</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h2 id="📝p179-jquery-gt-VanillaJS"><a href="#📝p179-jquery-gt-VanillaJS" class="headerlink" title="📝p179. jquery -&gt; VanillaJS"></a>📝p179. jquery -&gt; VanillaJS</h2><blockquote><p>음… 왜 굳이 예시를 Jquery로 들었는지 몰라서 작성</p></blockquote><h3 id="Jquery"><a href="#Jquery" class="headerlink" title="Jquery"></a>Jquery</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">`#myButton`</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">`버튼`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">`#myButton`</span>).addEventListener(<span class="string">`click`</span>, () =&gt; &#123;</span><br><span class="line">   <span class="built_in">window</span>.alert(<span class="string">`버튼`</span>); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="📝-180-콜백함수의-다른-예시-ex-Chrome-API"><a href="#📝-180-콜백함수의-다른-예시-ex-Chrome-API" class="headerlink" title="📝 180. 콜백함수의 다른 예시(ex. Chrome API)"></a>📝 180. 콜백함수의 다른 예시(ex. Chrome API)</h2><blockquote><p>Promise, async/ await 으로 바뀌는 추세이지만, 아직도 많은 부분에 callback 함수가 남아있다.</p></blockquote><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200323082731982.png" alt="image-20200323082731982"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성했습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;6장-함수-목차&quot;&gt;&lt;a href=&quot;#6장-함수-목차&quot; 
      
    
    </summary>
    
      <category term="Typescript" scheme="https://typescript-study.github.io/categories/Typescript/"/>
    
    
      <category term="Typescript" scheme="https://typescript-study.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Accordion FE 2차 Prototype 준비사항</title>
    <link href="https://typescript-study.github.io/wiki/Accordion-FE_prototype-v2_%EA%B3%84%ED%9A%8D/"/>
    <id>https://typescript-study.github.io/wiki/Accordion-FE_prototype-v2_계획/</id>
    <published>2020-03-18T03:39:05.000Z</published>
    <updated>2020-04-12T15:42:19.452Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Accordion-FE-prototype-v2-준비사항"><a href="#Accordion-FE-prototype-v2-준비사항" class="headerlink" title="Accordion-FE prototype-v2  준비사항"></a>Accordion-FE prototype-v2  준비사항</h2><h3 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h3><p>예상 일정: ~ 2020. 04 . 03. 금 까지</p><h4 id="개발예정-메인-새기능"><a href="#개발예정-메인-새기능" class="headerlink" title="개발예정: 메인 새기능"></a>개발예정: 메인 새기능</h4><ol><li>CRUD 테이블 컴포넌트 구현 - GET/POST/DELETE 대응</li><li><code>/admin/overview</code> 페이지 구현</li><li><code>/login</code> 페이지 구현 - <code>keycloak</code> 연동</li><li>모니터링 대시보드 - Active server chart 구현</li></ol><h4 id="개발예정-부가-새기능"><a href="#개발예정-부가-새기능" class="headerlink" title="개발예정: 부가 새기능"></a>개발예정: 부가 새기능</h4><ol><li>REST API 연결 - 현재는 <code>heml chart</code>  부분 가능</li></ol><hr><h3 id="피드백-필요사항"><a href="#피드백-필요사항" class="headerlink" title="피드백 필요사항"></a>피드백 필요사항</h3><ol><li>엔지니어분들이 주시는 데이터를 표시하는 표준적인 차트에 대한 지식이 부족 (예시. xlog, ElapsedTime, etc)</li></ol><p>기존 아코디언을 제외하고 이를 참고할만한 좋은 예시(링크, 이미지)가 필요</p><p>예시. “이 부분은 제니퍼 소프트에 어떤 차트같이 만들었으면 좋겠다.”</p><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200318144935073.png" alt="제니퍼 소프트"></p><ol start="2"><li>오픈시프트에서 참고할만 요소(링크, 이미지) 필요 - ∵ 오픈시프트에 대한 지식 부족</li></ol><h3 id="개선-필요사항"><a href="#개선-필요사항" class="headerlink" title="개선 필요사항"></a>개선 필요사항</h3><ol><li>차트의 <code>zoom</code> 기능이 기존 스크롤과 중복되어 발생되는 버그들이 존재하여, 드래그하여 시간을 이동하는 기능만 넣고 시간축 확대 기능은 제외할지 고민 중</li><li>메인 페이지 - <code>Pod, Service, Project, Node</code> 엘리먼트, Running/ Fail 나누어서 클릭하여 모달창 띄울 예정</li><li>현재 SPA 라우팅 속도 문제 해결 필요 - 화면의 FOUS 발생없이 한번에 화면 전환이 되야함</li></ol><h3 id="기획-필요사항"><a href="#기획-필요사항" class="headerlink" title="기획 필요사항"></a>기획 필요사항</h3><ol><li><code>프로젝트 - 앱  - 앱 추가</code> 기능에 현재 테이블 형태가 아닌, 스크롤이 존재하지않고 탭으로 관리하는 형태가 되면 어떨지 고려 중 (▼ 아래 그림은 예시)</li></ol><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200318144736298.png" alt="예시"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Accordion-FE-prototype-v2-준비사항&quot;&gt;&lt;a href=&quot;#Accordion-FE-prototype-v2-준비사항&quot; class=&quot;headerlink&quot; title=&quot;Accordion-FE prototype-v2  준비사항&quot;
      
    
    </summary>
    
      <category term="Accordion" scheme="https://typescript-study.github.io/categories/Accordion/"/>
    
    
      <category term="Accordion" scheme="https://typescript-study.github.io/tags/Accordion/"/>
    
  </entry>
  
  <entry>
    <title>Quick Start Typescript ~ 5장 정리</title>
    <link href="https://typescript-study.github.io/wiki/Typescript%20quick%20start%20-5%EC%9E%A5/"/>
    <id>https://typescript-study.github.io/wiki/Typescript quick start -5장/</id>
    <published>2020-03-15T03:39:05.000Z</published>
    <updated>2020-04-12T15:42:19.453Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성했습니다.</p><p>Typescript 학습하는 목적으로 이해도가 높지 못해, 작성시 참고한 링크를 작성했습니다.</p></blockquote><h2 id="📝p134-산술-연산자"><a href="#📝p134-산술-연산자" class="headerlink" title="📝p134. 산술 연산자"></a>📝p134. 산술 연산자</h2><p>ES7의 지수 연산자(<code>Math.pow</code>)를 지원, <code>**</code>를 이용</p><p>사용 예시</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> ** <span class="number">3</span>);<span class="comment">// 1000</span></span><br></pre></td></tr></table></figure><h2 id="📝p136-비교-연산자"><a href="#📝p136-비교-연산자" class="headerlink" title="📝p136. 비교 연산자"></a>📝p136. 비교 연산자</h2><blockquote><p>다른 언어와 다르게, 자바스크립트는 <code>===</code> 등호 3개가 존재, <code>==</code>와 다른 점은 <code>==</code>은 값만 비교한다면 <code>===</code>은 값과 타입을 비교하는 것이 다름</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'1'</span> == <span class="number">1</span>;<span class="comment">// true</span></span><br><span class="line"><span class="string">'1'</span> === <span class="number">1</span>;<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>위 사항은 자바스크립트 또한 마찬가지지만, 타입스크립트는 같은 타입과의 비교만 지원한다.</p><h2 id="📝p137-논리-연산자"><a href="#📝p137-논리-연산자" class="headerlink" title="📝p137. 논리 연산자"></a>📝p137. 논리 연산자</h2><blockquote><p>논리 연산자는 주로 변수 선언과 함께 함수 초기값 선언에 많이 사용된다.</p></blockquote><p>사용 예시</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이런식으로 기본값이 없으면, default를 만든다. 라는 것으로 선언 가능</span></span><br><span class="line"><span class="keyword">const</span> value: <span class="built_in">string</span> = value || <span class="string">'default'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 부정 연산자는 depth를 깊게하지 않기 위한, if문에 많이 사용됨</span></span><br><span class="line"><span class="keyword">if</span> (!isLogin) &#123;</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">`no login!`</span>);</span><br><span class="line">    location.href = <span class="string">`/login`</span>;<span class="comment">// login 라우팅으로 이동</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝p139-디스트럭처링"><a href="#📝p139-디스트럭처링" class="headerlink" title="📝p139 디스트럭처링"></a>📝p139 디스트럭처링</h2><h3 id="종류"><a href="#종류" class="headerlink" title="종류"></a>종류</h3><ol><li>객체 디스트럭처링</li><li>배열 디스트럭처링</li></ol><h3 id="1-객체-디스트럭처링"><a href="#1-객체-디스트럭처링" class="headerlink" title="1. 객체 디스트럭처링"></a>1. 객체 디스트럭처링</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; id, country = <span class="number">88</span> &#125; = &#123; id: <span class="string">`happy`</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(id);<span class="comment">// happy</span></span><br><span class="line"><span class="built_in">console</span>.log(country);<span class="comment">// 88</span></span><br></pre></td></tr></table></figure><h4 id="rename"><a href="#rename" class="headerlink" title="rename"></a>rename</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; id: newName1, country: newName2 &#125; = &#123; id: <span class="string">`happy`</span>, country: <span class="number">88</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(newName1);<span class="comment">// happy</span></span><br><span class="line"><span class="built_in">console</span>.log(newName2);<span class="comment">// 88</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(id, country);<span class="comment">// error Not defined</span></span><br></pre></td></tr></table></figure><h4 id="함수-파라미터-초기값-설정"><a href="#함수-파라미터-초기값-설정" class="headerlink" title="함수 파라미터 초기값 설정"></a>함수 파라미터 초기값 설정</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test(&#123; <span class="attr">name</span>: <span class="string">`happy`</span> &#125;);<span class="comment">// happy, none 출력</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">&#123; name, country = <span class="string">`none`</span> &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name, country);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="type-키워드-활용"><a href="#type-키워드-활용" class="headerlink" title="type 키워드 활용"></a>type 키워드 활용</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> C = &#123; a: <span class="built_in">string</span>, b?: <span class="built_in">number</span> &#125;;</span><br><span class="line"></span><br><span class="line">fruit(&#123; a: <span class="string">`apple`</span>, b: <span class="number">10</span> &#125;);<span class="comment">// apple 10</span></span><br><span class="line">fruit(&#123; a: <span class="string">`apple`</span>&#125;);<span class="comment">// apple undefined</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fruit</span>(<span class="params">&#123; a, b &#125;: C</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-배열-디스트럭처링"><a href="#2-배열-디스트럭처링" class="headerlink" title="2. 배열 디스트럭처링"></a>2. 배열 디스트럭처링</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="string">`one`</span>, <span class="string">`two`</span>, <span class="string">`three`</span>, <span class="string">`four`</span>, <span class="string">`five`</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이전 방식</span></span><br><span class="line"><span class="keyword">let</span> num1 = numbers[<span class="number">0</span>];<span class="comment">// one</span></span><br><span class="line"><span class="keyword">let</span> num2 = numbers[<span class="number">1</span>];<span class="comment">// two</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 이후 방식</span></span><br><span class="line"><span class="keyword">let</span> [num1, num2] = numbers;<span class="comment">// one, two</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과 동일</span></span><br><span class="line"><span class="built_in">console</span>.log(num1, num2);<span class="comment">// one, two</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 중간 빼오기</span></span><br><span class="line"><span class="keyword">let</span> [, , num3, num4, ] = numbers;</span><br><span class="line"><span class="built_in">console</span>.log(num3, num4);<span class="comment">// three, four</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 교체</span></span><br><span class="line">[num4, num3] = [num3, num4];</span><br><span class="line"><span class="built_in">console</span>.log(num3, num4);<span class="comment">// four, three</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 초기값 지정</span></span><br><span class="line"><span class="keyword">let</span> [color1, color2 = <span class="string">`blue`</span>] = [<span class="string">`black`</span>];</span><br><span class="line"><span class="built_in">console</span>.log(color1, color2);<span class="comment">// black blue</span></span><br></pre></td></tr></table></figure><h2 id="📝p146-전개-연산자"><a href="#📝p146-전개-연산자" class="headerlink" title="📝p146. 전개 연산자"></a>📝p146. 전개 연산자</h2><h3 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [first, ...second] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(first, second);<span class="comment">// 1  2, 3</span></span><br></pre></td></tr></table></figure><h3 id="객체"><a href="#객체" class="headerlink" title="객체"></a>객체</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numGroup = &#123; <span class="attr">n1</span>: <span class="number">1</span>, <span class="attr">n2</span>: <span class="number">2</span>, <span class="attr">n3</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; n2, ...n13 &#125; = numGroup;</span><br><span class="line"><span class="built_in">console</span>.log(n2, n13);<span class="comment">// 2    &#123; n1: 1, n3: 3&#125;;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;📖 Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성했습니다.&lt;/p&gt;
&lt;p&gt;Typescript 학습하는 목적으로 이해도가 높지 못해, 작성시 참고한 링크를 작성했습
      
    
    </summary>
    
      <category term="Typescript" scheme="https://typescript-study.github.io/categories/Typescript/"/>
    
    
      <category term="Typescript" scheme="https://typescript-study.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Quick Start Typescript ~ 4장 정리</title>
    <link href="https://typescript-study.github.io/wiki/Typescript%20quick%20start%20-4%EC%9E%A5/"/>
    <id>https://typescript-study.github.io/wiki/Typescript quick start -4장/</id>
    <published>2020-03-08T03:39:05.000Z</published>
    <updated>2020-03-11T09:40:58.292Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>📖  Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성했습니다.</p><p>Typescript 학습하는 목적으로 이해도가 높지 못해, 작성시 참고한 링크를 작성했습니다.</p></blockquote><h2 id="📝p39-package-json"><a href="#📝p39-package-json" class="headerlink" title="📝p39. package.json"></a>📝p39. <code>package.json</code></h2><p>프론트엔드에서 가장 먼저 살펴보는 파일</p><ol><li><p><code>package.json</code></p></li><li><p>번들러: <code>webpack.config.js</code> or <code>vue.config.js</code> </p><ul><li><p>JS 로더: <code>tsconfig.json</code>, <code>babel.config.js</code> or <code>.babelrc</code></p></li><li><p>CSS 로더: <code>postcss.config.js</code></p></li></ul></li><li><p><code>index.html</code> - JS/CSS/Font 삽입 보기</p></li><li><p>그외 Lint(코딩 컨벤션): <code>eslintrc.js</code></p></li></ol><h3 id="package-json-작성"><a href="#package-json-작성" class="headerlink" title="package.json 작성"></a><code>package.json</code> 작성</h3><blockquote><p>개인적으로 중요하다고 생각되는 부분이나 몰랐던 부분만 정리</p></blockquote><p><a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="noopener">이 사이트 (공식)</a>에서 자세히 설명되어있다. </p><p>+<a href="https://programmingsummaries.tistory.com/385" target="_blank" rel="noopener">한글 사이트</a></p><h4 id="name"><a href="#name" class="headerlink" title="name"></a>name</h4><p>주의사항: name에는 대문자를 포함해서는 안된다.</p><h4 id="version"><a href="#version" class="headerlink" title="version"></a>version</h4><p>버전 관리는 아래와 같은 <a href="https://docs.npmjs.com/about-semantic-versioning" target="_blank" rel="noopener">Rule</a>이 존재</p><blockquote><p>모르고 있던 부분</p></blockquote><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200308145529955.png" alt="Semantic Versioning"></p><h4 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h4><blockquote><p>개인적으로 가장 <code>package.json</code> 파일을 열었을 때, 가장 먼저 보는 항목</p><p><strong>참고링크</strong></p><p><a href="https://docs.npmjs.com/misc/scripts" target="_blank" rel="noopener">npm-scripts</a></p><p><a href="https://docs.npmjs.com/cli/run-script" target="_blank" rel="noopener">npm-run-scripts</a></p></blockquote><p>개발자가 설정해둔 커맨드 라인 명령어를 alias처럼 <code>npm run &lt;key값&gt;</code>으로 사용할 수 있다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line"></span><br><span class="line">"scripts": &#123;</span><br><span class="line">    "test:make": "mkdir make-test-folder"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run <span class="built_in">test</span>:make</span><br><span class="line"></span><br><span class="line"><span class="comment"># mkdir make-test-folder 명령어가 실행되고, 현재 경로에 make-test-folder 디렉토리가 생긴다.</span></span><br></pre></td></tr></table></figure><h4 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h4><p>실제 배포될 때 포함되는 패키지들</p><p><code>npm install</code> or <code>npm install --save</code> 로 저장된 패키지들</p><h4 id="devDependencies"><a href="#devDependencies" class="headerlink" title="devDependencies"></a>devDependencies</h4><p>개발용으로 필요한 패키지들 (lint, test, bundle etc)</p><p><code>npm install -D</code> or <code>npm install --save-dev</code>로 저장된 패키지들</p><h2 id="📝p40-npm-주요-명령어"><a href="#📝p40-npm-주요-명령어" class="headerlink" title="📝p40. npm 주요 명령어"></a>📝p40. npm 주요 명령어</h2><p>npm 주요 명령어를 짧게 칠 수 있다. (기본 aliases)</p><p>자주 사용하는 명령어라서 짧게 치면 편하다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 이전</span></span><br><span class="line">npm install &lt;패키지명&gt;</span><br><span class="line"><span class="comment"># 축약</span></span><br><span class="line">npm i &lt;패키지명&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 여러 축약</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 글로벌 설치</span></span><br><span class="line">npm i -g &lt;패키지명&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">## devDependency 설치</span></span><br><span class="line">npm i -D &lt;패키지명&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 삭제</span></span><br><span class="line">npm rm &lt;패키지명&gt;</span><br></pre></td></tr></table></figure><p><a href="https://docs.npmjs.com/cli-documentation/" target="_blank" rel="noopener">그 외 명령어들</a></p><h2 id="📝p48-tsconfig-json-설정"><a href="#📝p48-tsconfig-json-설정" class="headerlink" title="📝p48. tsconfig.json 설정"></a>📝p48. <code>tsconfig.json</code> 설정</h2><p>타입스크립트 컴파일 옵션 정의된 파일</p><blockquote><p><a href="https://www.typescriptlang.org/tsconfig" target="_blank" rel="noopener">공식 홈페이지</a></p><p><a href="https://vomvoru.github.io/blog/tsconfig-compiler-options-kr/" target="_blank" rel="noopener">참고: 간단히 정리된 블로그</a></p></blockquote><p><code>removeComments</code>의 경우 주석을 제거하여 컴파일 해주지만, 주석을 이용하여 webpack에서 번들링하는 경우가 존재하는 점을 유의</p><p>ex. /router/index.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DashboardView = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "dashboard" */</span> <span class="string">'@/views/admin/dashboard/DashBoardView.vue'</span>);</span><br></pre></td></tr></table></figure><p>위와 같이 URL 라우팅별로, code split하여 특정 JS만 불러오게 하는 기능을 주석으로 처리할 수도 있다.</p><p>*해당 라우팅으로 들어갔을 때, <code>dashboard.js</code> 파일만 불러오게하는 기능이다.</p><h2 id="📝p76-변수-선언"><a href="#📝p76-변수-선언" class="headerlink" title="📝p76. 변수 선언"></a>📝p76. 변수 선언</h2><blockquote><p>기존 JS(ES5) <code>var</code> 과 ES6에서 생긴 <code>let</code>, <code>const</code> 차이점이 중요</p><p>현재는 <code>var</code>은 잘 사용하지않는 편, 실제로 ESLint에서도 <a href="https://eslint.org/docs/rules/no-var" target="_blank" rel="noopener">no-var</a> option을 사용하여 사용 못하게 설정됨</p></blockquote><h3 id="var-vs-let-const-차이점"><a href="#var-vs-let-const-차이점" class="headerlink" title="var vs let, const 차이점"></a><code>var</code> vs <code>let</code>, <code>const</code> 차이점</h3><ol><li>호이스팅</li><li>함수 레벨 스코프(var) vs 블록 레벨 스코프(const, let)</li></ol><h4 id="호이스팅-차이"><a href="#호이스팅-차이" class="headerlink" title="호이스팅 차이"></a>호이스팅 차이</h4><p>선언이 유효범위에서 최상단으로 이동하는 것</p><p>JS에서 대표적으로 호이스팅(끌어올림)으로 되는 것이 <code>function</code>과 <code>var</code>이 있다. 안되는 것으로는 <code>class</code>, <code>const</code>, <code>let</code>이 있다.</p><h5 id="var의-경우"><a href="#var의-경우" class="headerlink" title="var의 경우"></a>var의 경우</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 개발 작성 코드</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="string">`global`</span>;<span class="comment">// 이렇게 할당된 변수는 window.test 객체로 할당된다.</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.test);<span class="comment">// `global`</span></span><br><span class="line"></span><br><span class="line">func();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(test);<span class="comment">// (A) 여기 표시값?</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="string">`local`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test);<span class="comment">// (B) 여기 표시값? </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 실제 실행되는 코드</span></span><br><span class="line"><span class="keyword">var</span> test; </span><br><span class="line">test = <span class="string">`global`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.test);<span class="comment">// `global`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;<span class="comment">// 함수도 호이스팅 되는 것을 알 수 있다.</span></span><br><span class="line"><span class="keyword">var</span> test;</span><br><span class="line"><span class="built_in">console</span>.log(test);<span class="comment">// (A) undefined</span></span><br><span class="line">test = <span class="string">`local`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test);<span class="comment">// (B) `local` </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func();</span><br></pre></td></tr></table></figure><p>(A) 부분에서 func내에서 지역변수로 <code>test</code> 변수가 호이스팅 했기 때문에 글로벌 변수 <code>test</code>를 가져오지 못하는 것을 알 수 있다.</p><h5 id="const-let의-경우"><a href="#const-let의-경우" class="headerlink" title="const, let의 경우"></a>const, let의 경우</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> testConst = <span class="string">`global-const`</span>;</span><br><span class="line"><span class="keyword">let</span> testLet = <span class="string">`global-let`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.testConst);<span class="comment">// undefined const</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.testLet);<span class="comment">// undefined letvar과 다르게 window 객체에 할당되지 않는다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// func();// Error, 아직 선언되지 않음</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> func = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// console.log(testConst);// Error, 아직 선언되지 않음</span></span><br><span class="line"><span class="comment">// console.log(testLet);// Error, 아직 선언되지 않음</span></span><br><span class="line"><span class="keyword">const</span> testConst = <span class="string">`local-const`</span>;</span><br><span class="line"><span class="keyword">let</span> testLet = <span class="string">`local-let`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(testConst);<span class="comment">// `local-const`</span></span><br><span class="line"><span class="built_in">console</span>.log(testLet);<span class="comment">// `local-let`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func();</span><br></pre></td></tr></table></figure><h4 id="함수-레벨-스코프-var-vs-블록-레벨-스코프-const-let"><a href="#함수-레벨-스코프-var-vs-블록-레벨-스코프-const-let" class="headerlink" title="함수 레벨 스코프(var) vs 블록 레벨 스코프(const, let)"></a>함수 레벨 스코프(var) vs 블록 레벨 스코프(const, let)</h4><h5 id="var의-경우-1"><a href="#var의-경우-1" class="headerlink" title="var의 경우"></a>var의 경우</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;<span class="comment">// 변수 범위 = 함수 안</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> test = <span class="string">`any`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(test);<span class="comment">// `any`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="const-let의-경우-1"><a href="#const-let의-경우-1" class="headerlink" title="const, let의 경우"></a>const, let의 경우</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;<span class="comment">// 변수 범위 = &#123;&#125; 블록 안</span></span><br><span class="line">        <span class="keyword">const</span> testConst = <span class="string">`const`</span>;</span><br><span class="line">        <span class="keyword">let</span> testLet = <span class="string">`let`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(testConst);<span class="comment">// Error, not defined</span></span><br><span class="line">    <span class="built_in">console</span>.log(testLet);<span class="comment">// Error, not defined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📝p86-타입-계층도"><a href="#📝p86-타입-계층도" class="headerlink" title="📝p86. 타입 계층도"></a>📝p86. 타입 계층도</h2><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200308220210471.png" alt="출처: Quick start Typescript p.86"></p><blockquote><p><a href="https://www.typescriptlang.org/docs/handbook/basic-types.html" target="_blank" rel="noopener">참고하면 좋은 링크</a></p><p>타입 체크가 Javascript에서 없던 부분이라 아직 많이 부족한 부분</p></blockquote><h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><p>가장 상위에 있는 타입</p><hr><h4 id="primitive-type"><a href="#primitive-type" class="headerlink" title="primitive type"></a>primitive type</h4><ol><li>string, number, boolean</li><li><strong>symbol</strong></li><li><strong>enum</strong></li><li><strong>문자열 리터럴</strong></li></ol><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><ol><li>Array</li><li><strong>Tuple</strong></li><li>Functopn</li><li>생성자 &lt;- ?</li><li>Class</li><li><strong>Interface</strong></li></ol><h4 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h4><p>2개 이상의 타입 하나의 타입으로 지정</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure><h4 id="intersection"><a href="#intersection" class="headerlink" title="intersection"></a>intersection</h4><p>두 타입을 합쳐 하나의 타입으로 만듦</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Dog &#123;</span><br><span class="line">    leg: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Bird &#123;</span><br><span class="line">    wing: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dogBird: Dog &amp; Brid = &#123;</span><br><span class="line">    leg: <span class="built_in">number</span>;</span><br><span class="line">    wing: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="Primitive-type"><a href="#Primitive-type" class="headerlink" title="Primitive type"></a>Primitive type</h4><h5 id="생략-string-number-boolean"><a href="#생략-string-number-boolean" class="headerlink" title="(생략) string, number, boolean"></a>(생략) string, number, boolean</h5><h5 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h5><p>유일하고 불변적인 식별자 (<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Symbol" target="_blank" rel="noopener">자세한 사항</a>)</p><p>ES6 이상에서부터 지원</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test = Symbol(<span class="string">`test`</span>);</span><br><span class="line"><span class="keyword">let</span> test2 = Symbol(<span class="string">`test`</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test === test2);<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>사용처</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> RED = Symbol();</span><br><span class="line"><span class="keyword">const</span> YELLOW = Symbol();</span><br><span class="line"><span class="keyword">const</span> ORANGE = Symbol();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 그 자체로 식별자 역할을 함</span></span><br></pre></td></tr></table></figure><blockquote><p>실제 개발상에서 사용해본 적이 없어서 아직 잘 모르겠다.</p><p><a href="https://perfectacle.github.io/2017/04/16/ES6-Symbol/" target="_blank" rel="noopener">사용 사례에 대한 링크</a></p></blockquote><h5 id="type"><a href="#type" class="headerlink" title="type"></a>type</h5><p>특정 문자열만 허용하는 타입</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> EventType = <span class="string">"keyup"</span> | <span class="string">"mouseover"</span>;</span><br></pre></td></tr></table></figure><h5 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123; Red = <span class="number">1</span>, Green, Blue &#125;;</span><br><span class="line"><span class="keyword">let</span> color: Color.Green;</span><br><span class="line"><span class="built_in">console</span>.log(color); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><blockquote><p>Object와의 차이점? (<a href="https://medium.com/@seungha_kim_IT/typescript-enum%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0-3b3ccd8e5552" target="_blank" rel="noopener">여기참고</a>)</p><ol><li><code>object</code>는 속성 자유롭게 변경 가능, <code>enum</code>은 그렇지 않음</li><li><code>enum</code>은 항상 리터럴 타입 사용</li><li><code>enum</code>의 속성값으로는 문자열 또는 숫자만 허용됨</li></ol></blockquote><p>사용 이유</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> korean = <span class="string">`ko`</span></span><br><span class="line"><span class="keyword">const</span> english = <span class="string">`en`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 코드 중복</span></span><br><span class="line"><span class="keyword">type</span> Language = <span class="string">`ko`</span> | <span class="string">`en`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 코드기 길어짐</span></span><br><span class="line"><span class="keyword">type</span> Language = <span class="keyword">typeof</span> korean | <span class="keyword">typeof</span> english</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code: Language = korean</span><br><span class="line"></span><br><span class="line"><span class="comment">// enum 사용시 가독성이 증가함</span></span><br><span class="line"><span class="keyword">enum</span> Language &#123;</span><br><span class="line">    korean = <span class="string">`ko`</span>,</span><br><span class="line">    english = <span class="string">`en`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code: Language = Language.korean</span><br></pre></td></tr></table></figure><hr><h4 id="Object-Type"><a href="#Object-Type" class="headerlink" title="Object Type"></a>Object Type</h4><h5 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h5><h6 id="array-type"><a href="#array-type" class="headerlink" title="array type"></a>array type</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array; <span class="built_in">string</span>[] = [<span class="string">`a`</span>, <span class="string">`b`</span>, <span class="string">`c`</span>];</span><br></pre></td></tr></table></figure><h6 id="generic-array-type-lt-gt"><a href="#generic-array-type-lt-gt" class="headerlink" title="generic array type &lt;&gt;"></a>generic array type &lt;&gt;</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">`a`</span>, <span class="string">`b`</span>, <span class="string">`c`</span>];</span><br></pre></td></tr></table></figure><p>차이점: primitive 타입 외에 object 타입도 받을 수 있다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array: <span class="built_in">Array</span>&lt;<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">string</span>&gt; = [<span class="function"><span class="params">()</span> =&gt;</span> <span class="string">`a`</span>, <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">`b`</span>, <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">`c`</span>];</span><br></pre></td></tr></table></figure><h5 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h5><p>n개에 대한 배열 타입</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">`text`</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">array = [<span class="number">1</span>, <span class="string">`t`</span>];<span class="comment">// error - 각 index에 대한 타입이 안맞음</span></span><br><span class="line">array = [<span class="string">`t`</span>, <span class="number">10</span>, <span class="string">`e`</span>, <span class="number">1</span>];<span class="comment">// error - index를 초과하여 받음</span></span><br></pre></td></tr></table></figure><blockquote><p>이번 장에서 다루지 않는 것들 생략</p></blockquote><h5 id="생략-Function"><a href="#생략-Function" class="headerlink" title="(생략) Function"></a>(생략) Function</h5><h5 id="생략-생성자"><a href="#생략-생성자" class="headerlink" title="(생략) 생성자"></a>(생략) 생성자</h5><h5 id="생략-Class"><a href="#생략-Class" class="headerlink" title="(생략) Class"></a>(생략) Class</h5><h5 id="생략-Interface"><a href="#생략-Interface" class="headerlink" title="(생략) Interface"></a>(생략) Interface</h5><h2 id="📝p114-undefined-null"><a href="#📝p114-undefined-null" class="headerlink" title="📝p114 undefined !== null"></a>📝p114 <code>undefined</code> !== <code>null</code></h2><p><code>undefined</code>는 선언은 됬지만, 값이 할당되지 않은 상태</p><p><code>null</code>은 선언과 값이 없다고 할당된 상태</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span> === <span class="literal">null</span>; <span class="comment">// false</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>===</code> 비교 연산자는 type까지 값은지 체크해주지만, <code>==</code>는 값만 체크</p><p>ex.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="string">`1`</span>;<span class="comment">// true</span></span><br><span class="line"><span class="number">1</span> === <span class="string">`1`</span>;<span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="📝p123-for-…-in-문-주의사항"><a href="#📝p123-for-…-in-문-주의사항" class="headerlink" title="📝p123 for … in 문 주의사항"></a>📝p123 for … in 문 주의사항</h2><blockquote><p>이전에 이슈 걸렸던 사항으로 작성</p></blockquote><p><code>for ... in</code> 문은 없는 인덱스는 출력하지 않는다.</p><p>ex.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> [<span class="number">1</span>,,,<span class="number">4</span>]) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200309004858167.png" alt="for...in문"></p><p><code>for ... of</code>문은 출력</p><p><img src="https://raw.githubusercontent.com/taeuk-gang/save-image-repo/image/img/image-20200309004950037.png" alt="for...of문"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;📖  Quick Start Typescript 을 읽고, 간단히 몰랐던 부분이나 중요하다고 생각되는 부분을 작성했습니다.&lt;/p&gt;
&lt;p&gt;Typescript 학습하는 목적으로 이해도가 높지 못해, 작성시 참고한 링크를 작성했
      
    
    </summary>
    
      <category term="Typescript" scheme="https://typescript-study.github.io/categories/Typescript/"/>
    
    
      <category term="Typescript" scheme="https://typescript-study.github.io/tags/Typescript/"/>
    
  </entry>
  
</feed>
